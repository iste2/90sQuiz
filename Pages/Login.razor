@page "/"
@using Microsoft.AspNetCore.Components
@using Quiz90s.GameData
@using Microsoft.AspNetCore.SignalR.Client
@using Quiz90s.Hubs
@using Quiz90s.State

@implements IDisposable

@inject NavigationManager NavigationManager
@inject ClientState ClientState

@if(ClientState.HubConnection != null) 
{
    
    <h3>Quis90s</h3>
    <MudContainer Class="justify-center">
         <MudCarousel ItemsSource="@Resources.ProfileImages" Style="height: 200px; width: 300px; margin-left: auto; margin-right: auto;" ShowBullets="false" AutoCycle="false">
            <ItemTemplate>
                <div class="d-flex flex-column flex-column justify-center" style="height:100%; width: 100%;">
                    <MudAvatar Class="" Image="@context" Style="height:200px; width:200px;align-self: center;"/>
                </div>
            </ItemTemplate>
        </MudCarousel>
    </MudContainer>
   
    

    <MudTextField @bind-Value="ClientState.Player.Name"></MudTextField>
    <MudTextField @bind-Value="GameId"></MudTextField>
    <MudButton @onclick="Connect">@ConnectDisplayText</MudButton>
    <MudText>@StatusDisplayText</MudText>
    
}
else
{
    <MudText>LÃ¤dt</MudText>
}


@code {

    public string GameId { get; set; }
    
    public string StatusDisplayText { get; set; }
    
    public string ConnectDisplayText => !string.IsNullOrEmpty(GameId) ? "Spiel beitreten" : "Neues Spiel starten";

    protected override async Task OnInitializedAsync()
    {
        ClientState.HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        ClientState.HubConnection.On(Actions.JoinGameSuccess.ToString(), (Player player) =>
        {
            Console.WriteLine("received success");
            StatusDisplayText = $"{player.Name} verbunden.";
            StateHasChanged();
        });

        await ClientState.HubConnection.StartAsync();
        StatusDisplayText = ClientState.HubConnection.State.ToString();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        ClientState.OnChange += StateHasChanged;
    }

    public async void Connect()
    {
        if (ClientState.HubConnection == null) 
            return;
        await ClientState.HubConnection.SendAsync(Actions.JoinGame.ToString(), ClientState.Player, GameId);
    }


    public void Dispose()
    {
        ClientState.OnChange -= StateHasChanged;
    }

}
